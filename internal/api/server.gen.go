// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	strictgin "github.com/oapi-codegen/runtime/strictmiddleware/gin"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (POST /api/v1/products)
	ProductServiceCreateProduct(c *gin.Context)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// ProductServiceCreateProduct operation middleware
func (siw *ServerInterfaceWrapper) ProductServiceCreateProduct(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ProductServiceCreateProduct(c)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.POST(options.BaseURL+"/api/v1/products", wrapper.ProductServiceCreateProduct)
}

type ProductServiceCreateProductRequestObject struct {
	Body *ProductServiceCreateProductJSONRequestBody
}

type ProductServiceCreateProductResponseObject interface {
	VisitProductServiceCreateProductResponse(w http.ResponseWriter) error
}

type ProductServiceCreateProduct200JSONResponse CreateProductResponse

func (response ProductServiceCreateProduct200JSONResponse) VisitProductServiceCreateProductResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ProductServiceCreateProductdefaultJSONResponse struct {
	Body       Status
	StatusCode int
}

func (response ProductServiceCreateProductdefaultJSONResponse) VisitProductServiceCreateProductResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {

	// (POST /api/v1/products)
	ProductServiceCreateProduct(ctx context.Context, request ProductServiceCreateProductRequestObject) (ProductServiceCreateProductResponseObject, error)
}

type StrictHandlerFunc = strictgin.StrictGinHandlerFunc
type StrictMiddlewareFunc = strictgin.StrictGinMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// ProductServiceCreateProduct operation middleware
func (sh *strictHandler) ProductServiceCreateProduct(ctx *gin.Context) {
	var request ProductServiceCreateProductRequestObject

	var body ProductServiceCreateProductJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ProductServiceCreateProduct(ctx, request.(ProductServiceCreateProductRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ProductServiceCreateProduct")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ProductServiceCreateProductResponseObject); ok {
		if err := validResponse.VisitProductServiceCreateProductResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9xWUW/bNhD+KwduDyvgym6zl/mpnhsExoDVSIIBQ2CgZ/IkXUuRKkk58AL/94GkHDuW",
	"0HVA97I36Y68++6770g+CWmb1hoywYv5k/CypgbT59IRBlo7qzoZbulLRz5EuyIvHbeBrRFz0TugIe+x",
	"IiitAxl3sqkAoc3bxUS0zrbkAlMKLjFQZd0+fod9S2IufHBsKnGYvMww4jfY0KijdSzHPT5g6FJmMl0j",
	"5g9isbxf/XEtJmL1e/+5mYjSugaDmOdVk2GcgFWKwoEaP5qpN6BzuBeHw0Q4+tKxIxWTJuRHnJvnxXb7",
	"iWSIuy9I9601nsZYz55/S/vRPn8SPzoqxVz8MD0JYNp3f9rnT/AHEG+srXSEGOy2Kxcm9RCV4ogN9fos",
	"YXAdXbRTLK0JyMYDGkC35eDQ7cGTY9T8F6nnklBbU8EjhxoQ3kUYEGoMkMNtyUOoCZLdlul7GKQYMPAu",
	"13NJ6P03hbpo9hg76xPD31HxrP4HgzDg6u4Zy7AZH7PzY+6KopINeUDQtmKJGsg566CxinSWBXvwHQfc",
	"6jwNisuSHJkQh6Fy2DRxNMjs2FnTRLlPgI3UnYr22+u7e1isV1GWCm7Xy/RTwCoF7jwp2O7hobpdLzc/",
	"1SG0fj6dVhzqbltI20wr18pXBVyjrE/Qj0qWR8mH2hFByyTJR6UpDDjvS5FW0eRYVt44SWCySVFA1r6A",
	"P20HEg2UbBTYLkBjHQFu42eo2b9gJu6v7SMEC4/Wfc7TxAHYJJU/LNYreE+eKwM3HSs61Sa17VRRpVlP",
	"FWLLfqrS2mlK4V8NpysWMd7PrLu+yseaZQ2+tp1WsKV4FESdwQ51l0bwoU/sWlksraLNwBBzP4uUTbh6",
	"e1Ipm0AVuTxYibYhpgVo9iHm6sn2WUYSndsnci54h/uaHEU1IEjbNNaAp/MASak+aS8JKdiom4jzeUa+",
	"duYOj9XBDE1En2qsHEU70rEXr0uUSeovpXTJORu4NpVmXxewMPuIdXzr2R5tZX8oRmH5OFxHJZ31J8u/",
	"6JnbfMUFJZNWE7DuLPQ20y81kwnfdOpGE5vSZgWagPn8pQZZR/ZCjQY94y8/v5m9q6I1Klocz09xQ9bU",
	"++4zrJrBYSw+tIQmzsnuCpSVXTw6UpOvXy9t05CT9HqxXkWcHHQMN3DsyPkcbFbMijcxh23JYMtiLq6K",
	"WXEVBwlDnUQSJ226ezPt7+p8b9uxt9f6w909DJan4A7jmpWKq7LjjtyOJb14YIj8OiEffrVqf6SPTMqF",
	"batZpjjTTz5fTFms/yTl0Zfj4eVbKD4NkiE/ZFKVb2ez/wpD/5BKIC76+1vueYmdDt8tfX+1jeR7nzP1",
	"M+ZOyI536sNFx8TmcOZ8Oor2YtFhc/g7AAD//zPKHmbMCwAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
